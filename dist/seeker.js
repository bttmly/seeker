// Generated by CoffeeScript 1.7.1
(function() {
  var $, DOWN, ENTER, ESC, Seeker, UP, body, buildHtml, exports, interpolate, jQuery, map, normalize, slice, template,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof require === "function") {
    $ = jQuery = require("jquery");
  } else {
    jQuery = window.jQuery;
    $ = jQuery;
  }

  if (!String.prototype.contains) {
    String.prototype.contains = function() {
      return String.prototype.indexOf.apply(this, arguments) !== -1;
    };
  }

  interpolate = function(str, obj) {
    return str.replace(/\{([^{}]*)\}/g, function(a, b) {
      var r;
      r = obj[b];
      if (typeof r === "string" || typeof r === "number") {
        return r;
      } else {
        return a;
      }
    });
  };

  slice = Function.prototype.call.bind(Array.prototype.slice);

  map = Function.prototype.call.bind(Array.prototype.map);

  body = $("body");

  ENTER = 13;

  ESC = 27;

  UP = 38;

  DOWN = 40;

  template = "<div class=\"seeker\">\n  <div class=\"current-selection\">\n    <i class=\"icon\"></i>\n    <span class=\"selected-item\"></span>\n  </div>\n  <div class=\"dropdown\">\n    <div class=\"dropdown--top\">\n      <div class=\"dropdown--label\">\n        Select branch:\n        <div class=\"close\">&times;</div>\n      </div>\n      <div class=\"dropdown--search-bar\">\n        <input class=\"search-field\"></input>\n      </div>\n    </div>\n    <div class=\"dropdown--options\">\n      <ul class=\"option-list\">\n        {options}\n      </ul>\n    </div>\n  </div>\n</div>";

  normalize = function(param) {
    if (param instanceof jQuery) {
      return param;
    } else if (param.target) {
      return $(param.target);
    } else {
      return $(param);
    }
  };

  buildHtml = function(el) {
    var params;
    params = {};
    params.options = map(el.find("option"), function(option) {
      return "<li class='option-list--item'>" + option.innerHTML + "</li>";
    }).join("\n");
    return interpolate(template, params);
  };

  Seeker = (function(_super) {
    __extends(Seeker, _super);

    function Seeker(el) {
      this.setSelected = __bind(this.setSelected, this);
      this.setActive = __bind(this.setActive, this);
      this.switchToActive = __bind(this.switchToActive, this);
      this.filterResults = __bind(this.filterResults, this);
      this.handleInput = __bind(this.handleInput, this);
      this.toggleState = __bind(this.toggleState, this);
      this.close = __bind(this.close, this);
      this.open = __bind(this.open, this);
      this.wireOriginal = __bind(this.wireOriginal, this);
      var html;
      html = buildHtml(el);
      jQuery.fn.init.call(this, html);
      this.el = el;
      this.button = this.find(".current-selection");
      this.current = this.find(".selected-item");
      this.dropdown = this.find(".dropdown");
      this.searchField = this.find(".search-field");
      this.items = this.find(".option-list--item");
      this.selection = this.find(".selection");
      this.closeMark = this.find(".close");
      this.isOpen = false;
      this.filteredOptions = null;
      this.selectedItem = null;
      this.activeItem = null;
      body.on("click", this.close);
      this.click(function(evt) {
        return evt.stopPropagation();
      });
      this.keyup((function(_this) {
        return function(evt) {
          if (evt.which === ENTER || evt.which === DOWN) {
            return _this.open();
          }
        };
      })(this));
      this.button.click(this.toggleState);
      this.searchField.keyup(this.handleInput);
      this.closeMark.click(this.close);
      this.items.click(this.setSelected);
      this.items.mouseover(this.setActive);
      this.wireOriginal().setSelected(this.items.first()).toggleClass("is-open", false).el.hide().after(this);
    }

    Seeker.prototype.wireOriginal = function() {
      this.on("change", (function(_this) {
        return function() {
          return _this.el.find("option").each(function(i, el) {
            if (el.innerHTML === _this.selectedItem[0].innerHTML) {
              el.selected = true;
              return false;
            }
          });
        };
      })(this));
      this.el.on("change", (function(_this) {
        return function() {
          var selected;
          selected = _this.el.find(":selected");
          return _this.items.each(function(i, el) {
            if (el.innerHTML === selected[0].innerHTML) {
              _this.setSelected(el, true);
              return false;
            }
          });
        };
      })(this));
      this.prop("tabIndex", this.el.prop("tabIndex"));
      this.el.prop("tabIndex", -1);
      return this;
    };

    Seeker.prototype.open = function() {
      if (!this.isOpen) {
        this.isOpen = true;
        this.toggleClass("is-open", this.isOpen);
        return this.searchField.focus();
      }
    };

    Seeker.prototype.close = function() {
      if (this.isOpen) {
        this.isOpen = false;
        this.toggleClass("is-open", this.isOpen);
        this.items.show();
        this.searchField.val("");
        return this.focus();
      }
    };

    Seeker.prototype.toggleState = function() {
      if (this.isOpen) {
        return this.close();
      } else {
        return this.open();
      }
    };

    Seeker.prototype.handleInput = function(evt) {
      var next, prev;
      if (evt.which === ESC) {
        return this.close();
      } else if (evt.which === ENTER) {
        this.switchToActive();
        return evt.stopPropagation();
      } else if (evt.which === UP) {
        prev = this.activeItem.prev();
        if (prev.length) {
          return this.setActive(prev);
        }
      } else if (evt.which === DOWN) {
        next = this.activeItem.next();
        if (next.length) {
          return this.setActive(next);
        }
      } else {
        return this.filterResults();
      }
    };

    Seeker.prototype.filterResults = function() {
      var first, str;
      str = this.searchField.val().toLowerCase();
      first = void 0;
      this.items.each(function() {
        var $this, against;
        $this = $(this);
        against = $this.html().toLowerCase();
        if (against.contains(str)) {
          $this.show();
          if (!first) {
            return first = $this;
          }
        } else {
          return $this.hide();
        }
      });
      return this.setActive(first);
    };

    Seeker.prototype.switchToActive = function() {
      return this.setSelected(this.activeItem);
    };

    Seeker.prototype.val = function() {
      return this.el.val();
    };

    Seeker.prototype.setActive = function(param) {
      param = normalize(param);
      if (param !== this.activeItem) {
        this.activeItem = normalize(param);
        this.items.removeClass("is-active");
        this.activeItem.addClass("is-active");
      }
      return this;
    };

    Seeker.prototype.setSelected = function(param, quiet) {
      param = normalize(param);
      if (param !== this.selectedItem) {
        this.selectedItem = param;
        this.items.removeClass("is-selected");
        this.selectedItem.addClass("is-selected");
        this.current.html(this.selectedItem.html());
        if (!quiet) {
          this.trigger("change");
        }
        this.setActive(this.selectedItem);
      }
      this.close();
      return this;
    };

    Seeker.prototype.pushStack = function(elems) {
      var ret;
      ret = jQuery.merge(jQuery(), elems);
      ret.prevObject = this;
      ret.context = this.context;
      return ret;
    };

    Seeker.prototype.end = function() {
      var _ref;
      return (_ref = this.prevObject) != null ? _ref : jQuery(null);
    };

    return Seeker;

  })(jQuery);

  exports = exports != null ? exports : this;

  exports.Seeker = Seeker;

  exports.jQuery = jQuery;

}).call(this);
