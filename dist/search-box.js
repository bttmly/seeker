// Generated by CoffeeScript 1.7.1
(function() {
  var $, DOWN, ENTER, ESC, SearchBox, UP, body, exports, jQuery, slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (typeof require === "function") {
    $ = jQuery = require("jquery");
  } else {
    jQuery = window.jQuery;
    $ = jQuery;
  }

  if (!String.prototype.contains) {
    String.prototype.contains = function() {
      return String.prototype.indexOf.apply(this, arguments) !== -1;
    };
  }

  slice = Function.prototype.call.bind(Array.prototype.slice);

  ENTER = 13;

  ESC = 27;

  UP = 38;

  DOWN = 40;

  body = $("body");

  SearchBox = (function() {
    function SearchBox(el) {
      this.selectItem = __bind(this.selectItem, this);
      this.switchToActive = __bind(this.switchToActive, this);
      this.changeActive = __bind(this.changeActive, this);
      this.filterResults = __bind(this.filterResults, this);
      this.handleInput = __bind(this.handleInput, this);
      this.toggleState = __bind(this.toggleState, this);
      this.close = __bind(this.close, this);
      this.open = __bind(this.open, this);
      this.root = $(el);
      this.button = this.root.find(".current-selection");
      this.current = this.root.find(".selected-item");
      this.dropdown = this.root.find(".dropdown");
      this.searchField = this.root.find(".search-field");
      this.items = this.root.find(".option-list--item");
      this.selection = this.root.find(".selection");
      this.closeMark = this.root.find(".close");
      this.isOpen = false;
      this.filteredOptions = null;
      this.selectedItem = null;
      this.activeItem = null;
      this.root.toggleClass("is-open", false);
      this.root.on("keyup", (function(_this) {
        return function(evt) {
          if (evt.which === ENTER || evt.which === DOWN) {
            return _this.open();
          }
        };
      })(this));
      body.on("click", this.close);
      this.root.on("click", function(evt) {
        return evt.stopPropagation();
      });
      this.button.click(this.toggleState);
      this.searchField.keyup(this.handleInput);
      this.closeMark.click(this.close);
      this.items.click(this.selectItem);
      this.items.mouseover(this.changeActive);
      this.selectItem(this.items.first());
    }

    SearchBox.prototype.open = function() {
      if (!this.isOpen) {
        this.isOpen = true;
        this.root.toggleClass("is-open", this.isOpen);
        return this.searchField.focus();
      }
    };

    SearchBox.prototype.close = function() {
      if (this.isOpen) {
        this.isOpen = false;
        this.root.toggleClass("is-open", this.isOpen);
        this.items.show();
        this.searchField.val("");
        return this.root.focus();
      }
    };

    SearchBox.prototype.toggleState = function() {
      if (this.isOpen) {
        return this.close();
      } else {
        return this.open();
      }
    };

    SearchBox.prototype.handleInput = function(evt) {
      var next, prev;
      if (evt.which === ESC) {
        return this.close();
      } else if (evt.which === ENTER) {
        this.switchToActive();
        return evt.stopPropagation();
      } else if (evt.which === UP) {
        prev = this.activeItem.prev();
        if (prev.length) {
          return this.changeActive(prev);
        }
      } else if (evt.which === DOWN) {
        next = this.activeItem.next();
        if (next.length) {
          return this.changeActive(next);
        }
      } else {
        return this.filterResults();
      }
    };

    SearchBox.prototype.filterResults = function() {
      var first, str;
      str = this.searchField.val().toLowerCase();
      first = void 0;
      this.items.each(function() {
        var $this, against;
        $this = $(this);
        against = $this.html().toLowerCase();
        if (against.contains(str)) {
          $this.show();
          if (!first) {
            return first = $this;
          }
        } else {
          return $this.hide();
        }
      });
      return this.changeActive(first);
    };

    SearchBox.prototype.changeActive = function(param) {
      if (!(param instanceof jQuery)) {
        param = $(param.target);
      }
      this.items.removeClass("is-active");
      param.addClass("is-active");
      return this.activeItem = param;
    };

    SearchBox.prototype.switchToActive = function() {
      return this.selectItem(this.activeItem);
    };

    SearchBox.prototype.on = function() {
      var args;
      args = this.bindMethods(arguments);
      $.fn.on.apply(this.root, args);
      return this;
    };

    SearchBox.prototype.trigger = function() {
      $.fn.trigger.apply(this.root, arguments);
      return this;
    };

    SearchBox.prototype.val = function(param) {
      if (param != null) {
        this.value = param;
        return this;
      } else {
        return this.value;
      }
    };

    SearchBox.prototype.selectItem = function(param) {
      if (!(param instanceof jQuery)) {
        param = $(param.target);
      }
      this.items.removeClass("is-selected");
      param.addClass("is-selected");
      this.selectedItem = param;
      this.changeActive(param);
      this.current.html(param.html());
      this.val(param.html());
      this.trigger("change");
      return this.close();
    };

    SearchBox.prototype.bindMethods = function(arr) {
      var i, item, _i, _len;
      arr = slice(arr);
      for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
        item = arr[i];
        if (typeof item === "function") {
          arr[i] = item.bind(this);
        }
      }
      return arr;
    };

    return SearchBox;

  })();

  exports = exports != null ? exports : this;

  exports.SearchBox = SearchBox;

  exports.jQuery = jQuery;

}).call(this);
